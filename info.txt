https://reactjs.org/docs/react-component.html
https://www.youtube.com/watch?v=PMfcsYzj-9M&t=1396s&ab_channel=JamesShore
https://github.com/HoracioGutierrez/jsinheritance/blob/master/translations/README.es.md
https://reactjs.org/docs/events.html
https://reactrouter.com/web/guides/quick-start
https://chrome.google.com/webstore/detail/redux-devtools/lmhkpmbekcpmknklioeibfkpmmfibljd?utm_source=chrome-ntp-icon



const obj = {x:1,y:2,z:3}

const {x:x,y:y,z:z} = obj
const {x,y,z} = obj

//const x = obj.x
//const y = obj.y
//const z = obj.z





const arr = [1,2,3]

const [uno,dos,tres] = arr

//const uno = arr[0]
//const dos = arr[1]
//const tres = arr[2]


const arr = [1,2,3]

for(let i = 0; i < arr.length ; i++){
    let elemento = arr[i]
}

const resultado = arr.forEach((elemento,indice)=>{})

const resultado = arr.map((elemento,indice)=>{})


arr.filter()
arr.reduce()
arr.sort()
arr.find()



OPERADOR REST/SPREAD (...)


//REST
function foo(...parametros){
    console.log(parametros) //[1,2,3,"hola"]
}

foo(1,2,3,"hola")



//SPREAD
const arr = [1,2,3,4]

const copia = [arr[0],arr[1],arr[2],arr[3]]
const copia = [...arr]


const obj = {x:1,y:2,z:3}
const copia = {x:obj.x,y:obj.y,z:obj.z}

const copia = {...obj}



REACT-ROUTER-DOM : Es una libreria que nos da componentes con funcionalidades ya hechas para usar PERO toda la aplicacion tiene que estar adentro de un Router

BrowserRouter : Usa la API History
HashRouter : Usa location.hash
MemoryRouter : Entornos que no sean navegador
StaticRouter : Entorno Back-End(Servidor/SSR)



 {/* <form onSubmit={this.manejarElSubmit}>
                    <div>
                        <input type="text" value={nombre} onChange={this.cambiaElInput}/>
                    </div>
                    <div>
                        <textarea value={comentario} onChange={this.cambiaElTextarea}></textarea>
                    </div>
                    <button>Agregar</button>
                </form> */}
                {/* comentarios.map((comentario)=>{
                    return (
                        <div key={comentario.nombre}>
                            <p><strong>{comentario.nombre}</strong>:{comentario.comentario}</p>
                        </div>
                    )
                }) */}
               {/*  <p>El contador va : {cantidad}</p>
                <button onClick={this.sumarCantidad}>+</button>
                <button onClick={this.resetearCantidad}>resetear</button>
                <button onClick={this.restarCantidad}>-</button> */}

            

REDUX (pub/sub-observer)

store = simil state - se crea a traves de un reducer
reducer = es una funcion pura que genera un nuevo store por cada caso de action
action = es una funcion pura y tienen que retornar un objeto




REACT-REDUX

Provider : Es un componente que usa el patro de children y sirve para alimentar a la aplicacion del store
connect : Es un componente HoC que sirve para conectar un componente con el store